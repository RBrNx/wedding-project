Resources:
  CognitoUserPoolWedding:
    Type: AWS::Cognito::UserPool
    Properties:
      # Generate a name based on the stage
      UserPoolName: wedding-${self:provider.stage}-user-pool
      # Set email as an alias
      AliasAttributes:
        - email
        - preferred_username
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: false
          RequireNumbers: true
          RequireSymbols: false
          TemporaryPasswordValidityDays: 7
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK

  CognitoUserPoolClientMobile:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      # Generate an app client name based on the stage
      ClientName: wedding-${self:provider.stage}-client-mobile
      UserPoolId:
        Ref: CognitoUserPoolWedding
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
      GenerateSecret: false

  CognitoUserPoolClientAPI:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      # Generate an app client name based on the stage
      ClientName: wedding-${self:provider.stage}-client-api
      UserPoolId:
        Ref: CognitoUserPoolWedding
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
      GenerateSecret: false

# Print out the Id of the User Pool that is created
Outputs:
  UserPoolId:
    Value:
      Ref: CognitoUserPoolWedding

  UserPoolMobileClientId:
    Value:
      Ref: CognitoUserPoolClientMobile

  UserPoolMobileApiId:
    Value:
      Ref: CognitoUserPoolClientAPI
