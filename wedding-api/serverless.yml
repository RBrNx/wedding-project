#org: rbrnx
app: wedding-project
service: wedding-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-offline:
    host: 0.0.0.0
    port: 4000
    noPrependStageInUrl: true
  domains:
    prod: api.thewatsonwedding.com
    staging: staging-api.thewatsonwedding.com
    dev: dev-api.thewatsonwedding.com
  customDomain:
    domainName: ${self:custom.domains.${self:provider.stage}}
    basePath: ''
    endpointType: 'regional'
    stage: '${self:provider.stage}'
    certificateName: 'thewatsonwedding.com'
    createRoute53Record: true
    securityPolicy: tls_1_2
    apiType: rest
    autoDomain: true
    enabled: true
  cognito:
    userPoolId: !Ref CognitoUserPoolWedding
    appClientId: !Ref CognitoUserPoolClientAPI

useDotenv: true
disabledDeprecations:
  - CLI_OPTIONS_SCHEMA
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  memorySize: 512
  timeout: 30
  lambdaHashingVersion: 20201221
  environment:
    MONGODB_URI: ${env:MONGODB_URI}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID, self:custom.cognito.userPoolId}
    COGNITO_APP_CLIENT_ID: ${env:COGNITO_APP_CLIENT_ID, self:custom.cognito.appClientId}
    SPOTIFY_CLIENT_ID: ${env:SPOTIFY_CLIENT_ID}
    SPOTIFY_CLIENT_SECRET: ${env:SPOTIFY_CLIENT_SECRET}
    EVENT_ID: ${env:EVENT_ID}

functions:
  unauthenticated:
    handler: src/server.unauthenticatedGQLHandler
    environment:
      SLS_DEBUG: true
    events:
      - http:
          path: api
          method: post
          cors: true
          authorizer: aws_iam

      - http:
          path: api
          method: get
          cors: true
          authorizer: aws_iam
  authenticated:
    handler: src/server.authenticatedGQLHandler
    environment:
      SLS_DEBUG: true
    events:
      - http:
          path: admin
          method: post
          cors: true
          authorizer: aws_iam

      - http:
          path: admin
          method: get
          cors: true
          authorizer: aws_iam
  spotifyCallback:
    handler: src/handlers/spotify.authCallback
    environment:
      SLS_DEBUG: true
      SPOTIFY_CLIENT_ID: ${env:SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${env:SPOTIFY_CLIENT_SECRET}
      EVENT_ID: ${env:EVENT_ID}
    events:
      - http:
          path: spotifyCallback
          method: post
          cors: true
          authorizer: aws_iam

      - http:
          path: spotifyCallback
          method: get
          cors: true
          authorizer: aws_iam

resources:
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
